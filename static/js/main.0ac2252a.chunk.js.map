{"version":3,"sources":["components/NumberMarker/index.js","components/NumberMarker/NumberMarker.js","components/MyPolygon/index.js","components/MyPolygon/MyPolygon.js","components/MapComponent/MapComponent.js","components/MapComponent/index.js","components/App/App.js","index.js"],"names":["NumberMarker","props","position","number","numIcon","L","divIcon","className","iconSize","iconAnchor","html","Marker","icon","MyPolygon","useState","polygon","setCoord","isFinish","setFinish","useMapEvent","e","latlng","finishPopup","Popup","length","onClose","map","point","index","lat","lng","onClick","Polygon","pathOptions","color","positions","Icon","Default","imagePath","MapComponent","isAreaMode","setAreaMode","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","htmlFor","type","name","id","value","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"ySAEeA,G,MCIM,SAACC,GAAW,IACvBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OAEZC,EAAUC,IAAEC,QAAQ,CACxBC,UAAW,cACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,KAAK,GAAD,OAAKP,KAGX,OAAO,cAACQ,EAAA,EAAD,CAAQT,SAAUA,EAAUU,KAAMR,MCf5BS,ECGG,WAChB,IADsB,EAGMC,mBAAS,IAHf,mBAGfC,EAHe,KAGNC,EAHM,OAIQF,oBAAS,GAJjB,mBAIfG,EAJe,KAILC,EAJK,KAMtBC,YAAY,SAAS,SAACC,GACpBJ,EAAS,GAAD,mBAAKD,GAAL,CAAcK,EAAEC,aAG1B,IASMC,EAAeL,EACnB,cAACM,EAAA,EAAD,CAAOrB,SAAUa,EAAQA,EAAQS,OAAS,GAAIC,QAN1B,WACpBP,GAAU,GACVF,EAAS,KAIT,SACGD,EAAQW,KAAI,SAACC,EAAOC,GACnB,OACE,eAAC,WAAD,WACE,iCAAOA,EAAQ,EAAf,QACA,sCACKD,EAAME,IADX,KACkBF,EAAMG,IADxB,QAGA,yBALaF,QAJS,KAgBhC,OAA0B,IAAnBb,EAAQS,OAAe,KAC5B,sCACIP,GACA,cAACM,EAAA,EAAD,CAAOrB,SAAUa,EAAQA,EAAQS,OAAS,GAA1C,SACE,wBAAQO,QA7BK,WACnBb,GAAU,IA4BJ,sBAIJ,cAACc,EAAA,EAAD,CAASC,YA1CS,CAAEC,MAAO,UA0CUC,UAAWpB,IAC/CO,EACAP,EAAQW,KAAI,SAACC,EAAOC,GAAR,OACX,cAAC,EAAD,CAEE1B,SAAUyB,EACVxB,OAAQyB,EAAQ,GAFXA,EAAQ,U,MC5CvBvB,IAAE+B,KAAKC,QAAQC,UAAY,+CAE3B,ICReC,EDQM,WAAO,IAAD,EACSzB,oBAAS,GADlB,mBAClB0B,EADkB,KACNC,EADM,KAEzB,OACE,eAACC,EAAA,EAAD,CAAcC,OAAQ,CAAC,OAAQ,QAASC,KAAM,GAAIC,iBAAiB,EAAnE,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAGN,sBAAKzC,UAAU,YAAf,UACE,uBAAO0C,QAAQ,gBAAf,yBACA,uBACEC,KAAK,WACLC,KAAK,gBACLC,GAAG,gBACHC,MAAOb,EACPc,SAAU,kBAAMb,GAAaD,SAIhCA,GAAc,cAAC,EAAD,Q,MEpBNe,MANf,WACE,OACE,cAAC,EAAD,KCDJC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0ac2252a.chunk.js","sourcesContent":["import NumberMarker from \"./NumberMarker\";\r\n\r\nexport default NumberMarker;\r\n","import React from \"react\";\r\nimport L from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport \"./NumberMarker.css\";\r\n\r\nconst NumberMarker = (props) => {\r\n  const { position, number } = props;\r\n\r\n  const numIcon = L.divIcon({\r\n    className: \"number-icon\",\r\n    iconSize: [20, 20],\r\n    iconAnchor: [10, 10],\r\n    html: `${number}`,\r\n  });\r\n\r\n  return <Marker position={position} icon={numIcon}></Marker>;\r\n};\r\n\r\nexport default NumberMarker;\r\n","import MyPolygon from './MyPolygon';\r\nexport default MyPolygon;","import React, { Fragment, useState } from \"react\";\r\nimport { Polygon, Popup, useMapEvent } from \"react-leaflet\";\r\nimport NumberMarker from \"../NumberMarker\";\r\n\r\nconst MyPolygon = () => {\r\n  const purpleOptions = { color: \"purple\" };\r\n\r\n  const [polygon, setCoord] = useState([]);\r\n  const [isFinish, setFinish] = useState(false);\r\n\r\n  useMapEvent(\"click\", (e) => {\r\n    setCoord([...polygon, e.latlng]);\r\n  });\r\n\r\n  const onFinishArea = () => {\r\n    setFinish(true);\r\n  };\r\n\r\n  const onCloseFinish = () => {\r\n    setFinish(false);\r\n    setCoord([]);\r\n  };\r\n\r\n  const finishPopup = !isFinish ? null : (\r\n    <Popup position={polygon[polygon.length - 1]} onClose={onCloseFinish}>\r\n      {polygon.map((point, index) => {\r\n        return (\r\n          <Fragment key={index}>\r\n            <span>{index + 1} :</span>\r\n            <span>\r\n              [ {point.lat}, {point.lng} ]\r\n            </span>\r\n            <br />\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </Popup>\r\n  );\r\n\r\n  return polygon.length === 0 ? null : (\r\n    <>\r\n      {!isFinish && (\r\n        <Popup position={polygon[polygon.length - 1]}>\r\n          <button onClick={onFinishArea}>Finish</button>\r\n        </Popup>\r\n      )}\r\n\r\n      <Polygon pathOptions={purpleOptions} positions={polygon}></Polygon>\r\n      {finishPopup}\r\n      {polygon.map((point, index) => (\r\n        <NumberMarker\r\n          key={index + 1}\r\n          position={point}\r\n          number={index + 1}\r\n        ></NumberMarker>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyPolygon;\r\n","import React, { useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport MyPolygon from \"../MyPolygon\";\r\n\r\nimport \"./MapComponent.css\";\r\n\r\nL.Icon.Default.imagePath = \"https://unpkg.com/leaflet@1.7.1/dist/images/\";\r\n\r\nconst MapComponent = () => {\r\n  const [isAreaMode, setAreaMode] = useState(false);\r\n  return (\r\n    <MapContainer center={[53.902, 27.561]} zoom={13} scrollWheelZoom={false}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n\r\n      <div className=\"area_mode\">\r\n        <label htmlFor=\"checkbox_area\">Area Mode: </label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"checkbox_area\"\r\n          id=\"checkbox_area\"\r\n          value={isAreaMode}\r\n          onChange={() => setAreaMode(!isAreaMode)}\r\n        />\r\n      </div>\r\n\r\n      {isAreaMode && <MyPolygon></MyPolygon>}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import MapComponent from './MapComponent';\r\nexport default MapComponent;","import MapComponent from \"../MapComponent\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <MapComponent />\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}